MongoDB：
介于关系数据库和非关系数据库之间的产品
一款基于分布式文件存储的数据库，旨在为WEB应用提供可扩展的高性能数据存储解决方案
将数据存储为一个文档（类似于JSON对象），数据结构由键值（key=>value）对组成
支持丰富的查询表达，可以设置任何属性的索引
支持副本集，分片

mkdir etc        //创建存放配置文件的目录
mkdir log        //创建存放日志文件的目录
mkdir -p data/db    //创建存放数据库的目录db，必须为这个名字
vim etc/mongodb.conf
dbpath=/usr/local/mongodb/data/db/     //指定数据库目录
logpath=/usr/local/mongodb/log/mongodb.log    //指定日志文件
logappend=true      //以追加的方式记录日志信息
fork=true       //服务以守护进程的方式运行
bind_ip=    //服务器ip地址
port=      //启动服务的端口号
mongodb/bin/mongod -f /mongodb/etc/mongodb.conf  //启动服务
mongodb/bin/mongod -f /mongodb/etc/mongodb.conf --shutdown  //停止服务
mongo  --host (服务器ip) --port(端口号)


MongoDB常用管理操作

1）数据库管理
命令格式：
show dbs 查看已有的库
db 显示当前所在的库
use 库名 切换库，若库不存在延时创建库
show collections 或 show tables 查看库下已有集合
db.dropDatabase() 删除当前所在的库
2）集合管理
命令格式：
db.集合名.drop() 删除集合
db.集合名.save({'',''}) 创建集合，集合不存在时，创建并添加文档
例子：   db.t1.save({name:"yaya",age:60,addr:"hebei",email:"yaya@163.com"})
        WriteResult({ "nInserted" : 1 }) 
3）文档管理
命令格式：
db.集合名.find()  查看集合里的所有内容
db.集合名.count()   统计
db.集合名.insert({“name”:”jim”})
db.集合名.find(条件)
db.集合名.findOne() 返回查询一条文档
db.集合名.remove({}) 删除所有文档
db.集合名.remove({条件}) 删除与条件匹配的所有文档

基本数据类型1）
1）null：用于表示空值或者不存在的字段，{“x”:null}
2）布尔值：布尔类型有两个值true和false，{“x”:true}
3）数值：shell默认使用64为浮点型数值，{“x”：3.14}或{“x”：3}，对于整型值，可以使用NumberInt（4字节符号整数）或NumberLong（8字节符号整数），{“x”:NumberInt(“3”)}{“x”:NumberLong(“3”)}
4）字符串：UTF-8（万国编码）字符串都可以表示为字符串类型的数据，{“x”：“呵呵”}
5）日期:日期被存储为自新纪元依赖经过的毫秒数，不存储时区，{“x”:new Date()}
6）正则表达式：查询时，使用正则表达式作为限定条件，语法与JavaScript的正则表达式相同，{“x”:/[abc]/}
7）数组：数据列表或数据集可以表示为数组，{“x”： [“a“，“b”,”c”]}，一个字段有多个值
8）内嵌文档：文档可以嵌套其他文档，被嵌套的文档作为值来处理，{“x”:{“y”:3 }}
# db.t1.save({book: {zuozhe:"dmy",bname:"yuweizhidao",jiaqian:69,version:2.0 }})
WriteResult({ "nInserted" : 1 })
9） 对象id：对象id是一个12字节的字符串，是文档的唯一标识，{“x”: objectId() }
#  "_id" : ObjectId("5badfa966827555e3fd86816")
10）二进制数据：二进制数据是一个任意字节的字符串。它不能直接在shell中使用。如果要将非utf-字符保存到数据库中，二进制数据是唯一的方式。
11）代码：查询和文档中可以包括任何JavaScript代码，{“x”:function(){/*…*/}}
# 10）二进制数据：二进制数据是一个任意字节的字符串。它不能直接在shell中使用。如果要将非utf-字符保存到数据库中，二进制数据是唯一的方式。
11）代码：查询和文档中可以包括任何JavaScript代码，{“x”:function(){/*…*/}}



数据导入导出/备份/恢复

数据导出
语法格式1
mongoexport --host ip地址 --port 端口 -d 库名 -c 集合名 -f 字段名1，字段名2 --type=csv > 目录名/文件名.csv
语法格式2
mongoexport --host ip地址 --port 端口 -d 库名 -c 集合名 -q '{条件}' -f 字段名1，字段名2 --type=csv > 目录名/文件名.csv
语法格式3
mongoexport --host ip地址 --port 端口 -d 库名 -c 集合名   -q '{条件}' -f 字段名1，字段名2 --type=json > 目录名/文件名.json

数据导入
语法格式1
mongoimport --host  --port -d -c --type=json 目录/文件名.json
语法格式2
mongoimport --host --port -d -c --type=csv [--headerline(忽略标题) --drop（删除原数据倒入新数据）]

数据备份
mongodump --host --port  //备份所有库到当前目录的dump目录下 
mongodump --host --port  -d  -c  -o 目录  //备份时指定备份的库和备份目录
bsondump //查看bson文件的内容

数据恢复
mongoresore --host --port -d 数据库名 -c 集合名 备份的目录名














